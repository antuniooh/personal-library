{"ast":null,"code":"import * as FreeStyle from \"free-style\";\nimport { convertToStyles, convertToKeyframes } from './formatting';\nimport { extend, raf } from './utilities';\n/**\n * Creates an instance of free style with our options\n */\n\nvar createFreeStyle = function () {\n  return FreeStyle.create();\n};\n/**\n * Maintains a single stylesheet and keeps it in sync with requested styles\n */\n\n\nvar TypeStyle =\n/** @class */\nfunction () {\n  function TypeStyle(_a) {\n    var _this = this;\n\n    var autoGenerateTag = _a.autoGenerateTag;\n    /**\n     * Insert `raw` CSS as a string. This is useful for e.g.\n     * - third party CSS that you are customizing with template strings\n     * - generating raw CSS in JavaScript\n     * - reset libraries like normalize.css that you can use without loaders\n     */\n\n    this.cssRaw = function (mustBeValidCSS) {\n      if (!mustBeValidCSS) {\n        return;\n      }\n\n      _this._raw += mustBeValidCSS || '';\n      _this._pendingRawChange = true;\n\n      _this._styleUpdated();\n    };\n    /**\n     * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n     */\n\n\n    this.cssRule = function (selector) {\n      var objects = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        objects[_i - 1] = arguments[_i];\n      }\n\n      var styles = convertToStyles(extend.apply(void 0, objects));\n\n      _this._freeStyle.registerRule(selector, styles);\n\n      _this._styleUpdated();\n\n      return;\n    };\n    /**\n     * Renders styles to the singleton tag imediately\n     * NOTE: You should only call it on initial render to prevent any non CSS flash.\n     * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n     **/\n\n\n    this.forceRenderStyles = function () {\n      var target = _this._getTag();\n\n      if (!target) {\n        return;\n      }\n\n      target.textContent = _this.getStyles();\n    };\n    /**\n     * Utility function to register an @font-face\n     */\n\n\n    this.fontFace = function () {\n      var fontFace = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        fontFace[_i] = arguments[_i];\n      }\n\n      var freeStyle = _this._freeStyle;\n\n      for (var _a = 0, _b = fontFace; _a < _b.length; _a++) {\n        var face = _b[_a];\n        freeStyle.registerRule('@font-face', face);\n      }\n\n      _this._styleUpdated();\n\n      return;\n    };\n    /**\n     * Allows use to use the stylesheet in a node.js environment\n     */\n\n\n    this.getStyles = function () {\n      return (_this._raw || '') + _this._freeStyle.getStyles();\n    };\n    /**\n     * Takes keyframes and returns a generated animationName\n     */\n\n\n    this.keyframes = function (frames) {\n      var keyframes = convertToKeyframes(frames); // TODO: replace $debugName with display name\n\n      var animationName = _this._freeStyle.registerKeyframes(keyframes);\n\n      _this._styleUpdated();\n\n      return animationName;\n    };\n    /**\n     * Helps with testing. Reinitializes FreeStyle + raw\n     */\n\n\n    this.reinit = function () {\n      /** reinit freestyle */\n      var freeStyle = createFreeStyle();\n      _this._freeStyle = freeStyle;\n      _this._lastFreeStyleChangeId = freeStyle.changeId;\n      /** reinit raw */\n\n      _this._raw = '';\n      _this._pendingRawChange = false;\n      /** Clear any styles that were flushed */\n\n      var target = _this._getTag();\n\n      if (target) {\n        target.textContent = '';\n      }\n    };\n    /** Sets the target tag where we write the css on style updates */\n\n\n    this.setStylesTarget = function (tag) {\n      /** Clear any data in any previous tag */\n      if (_this._tag) {\n        _this._tag.textContent = '';\n      }\n\n      _this._tag = tag;\n      /** This special time buffer immediately */\n\n      _this.forceRenderStyles();\n    };\n    /**\n     * Takes an object where property names are ideal class names and property values are CSSProperties, and\n     * returns an object where property names are the same ideal class names and the property values are\n     * the actual generated class names using the ideal class name as the $debugName\n     */\n\n\n    this.stylesheet = function (classes) {\n      var classNames = Object.getOwnPropertyNames(classes);\n      var result = {};\n\n      for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {\n        var className = classNames_1[_i];\n        var classDef = classes[className];\n\n        if (classDef) {\n          classDef.$debugName = className;\n          result[className] = _this.style(classDef);\n        }\n      }\n\n      return result;\n    };\n\n    var freeStyle = createFreeStyle();\n    this._autoGenerateTag = autoGenerateTag;\n    this._freeStyle = freeStyle;\n    this._lastFreeStyleChangeId = freeStyle.changeId;\n    this._pending = 0;\n    this._pendingRawChange = false;\n    this._raw = '';\n    this._tag = undefined; // rebind prototype to TypeStyle.  It might be better to do a function() { return this.style.apply(this, arguments)}\n\n    this.style = this.style.bind(this);\n  }\n  /**\n   * Only calls cb all sync operations settle\n   */\n\n\n  TypeStyle.prototype._afterAllSync = function (cb) {\n    var _this = this;\n\n    this._pending++;\n    var pending = this._pending;\n    raf(function () {\n      if (pending !== _this._pending) {\n        return;\n      }\n\n      cb();\n    });\n  };\n\n  TypeStyle.prototype._getTag = function () {\n    if (this._tag) {\n      return this._tag;\n    }\n\n    if (this._autoGenerateTag) {\n      var tag = typeof window === 'undefined' ? {\n        textContent: ''\n      } : document.createElement('style');\n\n      if (typeof document !== 'undefined') {\n        document.head.appendChild(tag);\n      }\n\n      this._tag = tag;\n      return tag;\n    }\n\n    return undefined;\n  };\n  /** Checks if the style tag needs updating and if so queues up the change */\n\n\n  TypeStyle.prototype._styleUpdated = function () {\n    var _this = this;\n\n    var changeId = this._freeStyle.changeId;\n    var lastChangeId = this._lastFreeStyleChangeId;\n\n    if (!this._pendingRawChange && changeId === lastChangeId) {\n      return;\n    }\n\n    this._lastFreeStyleChangeId = changeId;\n    this._pendingRawChange = false;\n\n    this._afterAllSync(function () {\n      return _this.forceRenderStyles();\n    });\n  };\n\n  TypeStyle.prototype.style = function () {\n    var className = this._freeStyle.registerStyle(convertToStyles(extend.apply(undefined, arguments)));\n\n    this._styleUpdated();\n\n    return className;\n  };\n\n  return TypeStyle;\n}();\n\nexport { TypeStyle };","map":{"version":3,"sources":["/home/antonio/personal-library/node_modules/typestyle/lib.es2015/internal/typestyle.js"],"names":["FreeStyle","convertToStyles","convertToKeyframes","extend","raf","createFreeStyle","create","TypeStyle","_a","_this","autoGenerateTag","cssRaw","mustBeValidCSS","_raw","_pendingRawChange","_styleUpdated","cssRule","selector","objects","_i","arguments","length","styles","apply","_freeStyle","registerRule","forceRenderStyles","target","_getTag","textContent","getStyles","fontFace","freeStyle","_b","face","keyframes","frames","animationName","registerKeyframes","reinit","_lastFreeStyleChangeId","changeId","setStylesTarget","tag","_tag","stylesheet","classes","classNames","Object","getOwnPropertyNames","result","classNames_1","className","classDef","$debugName","style","_autoGenerateTag","_pending","undefined","bind","prototype","_afterAllSync","cb","pending","window","document","createElement","head","appendChild","lastChangeId","registerStyle"],"mappings":"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","sourcesContent":["import * as FreeStyle from \"free-style\";\nimport { convertToStyles, convertToKeyframes } from './formatting';\nimport { extend, raf } from './utilities';\n/**\n * Creates an instance of free style with our options\n */\nvar createFreeStyle = function () { return FreeStyle.create(); };\n/**\n * Maintains a single stylesheet and keeps it in sync with requested styles\n */\nvar TypeStyle = /** @class */ (function () {\n    function TypeStyle(_a) {\n        var _this = this;\n        var autoGenerateTag = _a.autoGenerateTag;\n        /**\n         * Insert `raw` CSS as a string. This is useful for e.g.\n         * - third party CSS that you are customizing with template strings\n         * - generating raw CSS in JavaScript\n         * - reset libraries like normalize.css that you can use without loaders\n         */\n        this.cssRaw = function (mustBeValidCSS) {\n            if (!mustBeValidCSS) {\n                return;\n            }\n            _this._raw += mustBeValidCSS || '';\n            _this._pendingRawChange = true;\n            _this._styleUpdated();\n        };\n        /**\n         * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n         */\n        this.cssRule = function (selector) {\n            var objects = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                objects[_i - 1] = arguments[_i];\n            }\n            var styles = convertToStyles(extend.apply(void 0, objects));\n            _this._freeStyle.registerRule(selector, styles);\n            _this._styleUpdated();\n            return;\n        };\n        /**\n         * Renders styles to the singleton tag imediately\n         * NOTE: You should only call it on initial render to prevent any non CSS flash.\n         * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n         **/\n        this.forceRenderStyles = function () {\n            var target = _this._getTag();\n            if (!target) {\n                return;\n            }\n            target.textContent = _this.getStyles();\n        };\n        /**\n         * Utility function to register an @font-face\n         */\n        this.fontFace = function () {\n            var fontFace = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                fontFace[_i] = arguments[_i];\n            }\n            var freeStyle = _this._freeStyle;\n            for (var _a = 0, _b = fontFace; _a < _b.length; _a++) {\n                var face = _b[_a];\n                freeStyle.registerRule('@font-face', face);\n            }\n            _this._styleUpdated();\n            return;\n        };\n        /**\n         * Allows use to use the stylesheet in a node.js environment\n         */\n        this.getStyles = function () {\n            return (_this._raw || '') + _this._freeStyle.getStyles();\n        };\n        /**\n         * Takes keyframes and returns a generated animationName\n         */\n        this.keyframes = function (frames) {\n            var keyframes = convertToKeyframes(frames);\n            // TODO: replace $debugName with display name\n            var animationName = _this._freeStyle.registerKeyframes(keyframes);\n            _this._styleUpdated();\n            return animationName;\n        };\n        /**\n         * Helps with testing. Reinitializes FreeStyle + raw\n         */\n        this.reinit = function () {\n            /** reinit freestyle */\n            var freeStyle = createFreeStyle();\n            _this._freeStyle = freeStyle;\n            _this._lastFreeStyleChangeId = freeStyle.changeId;\n            /** reinit raw */\n            _this._raw = '';\n            _this._pendingRawChange = false;\n            /** Clear any styles that were flushed */\n            var target = _this._getTag();\n            if (target) {\n                target.textContent = '';\n            }\n        };\n        /** Sets the target tag where we write the css on style updates */\n        this.setStylesTarget = function (tag) {\n            /** Clear any data in any previous tag */\n            if (_this._tag) {\n                _this._tag.textContent = '';\n            }\n            _this._tag = tag;\n            /** This special time buffer immediately */\n            _this.forceRenderStyles();\n        };\n        /**\n         * Takes an object where property names are ideal class names and property values are CSSProperties, and\n         * returns an object where property names are the same ideal class names and the property values are\n         * the actual generated class names using the ideal class name as the $debugName\n         */\n        this.stylesheet = function (classes) {\n            var classNames = Object.getOwnPropertyNames(classes);\n            var result = {};\n            for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {\n                var className = classNames_1[_i];\n                var classDef = classes[className];\n                if (classDef) {\n                    classDef.$debugName = className;\n                    result[className] = _this.style(classDef);\n                }\n            }\n            return result;\n        };\n        var freeStyle = createFreeStyle();\n        this._autoGenerateTag = autoGenerateTag;\n        this._freeStyle = freeStyle;\n        this._lastFreeStyleChangeId = freeStyle.changeId;\n        this._pending = 0;\n        this._pendingRawChange = false;\n        this._raw = '';\n        this._tag = undefined;\n        // rebind prototype to TypeStyle.  It might be better to do a function() { return this.style.apply(this, arguments)}\n        this.style = this.style.bind(this);\n    }\n    /**\n     * Only calls cb all sync operations settle\n     */\n    TypeStyle.prototype._afterAllSync = function (cb) {\n        var _this = this;\n        this._pending++;\n        var pending = this._pending;\n        raf(function () {\n            if (pending !== _this._pending) {\n                return;\n            }\n            cb();\n        });\n    };\n    TypeStyle.prototype._getTag = function () {\n        if (this._tag) {\n            return this._tag;\n        }\n        if (this._autoGenerateTag) {\n            var tag = typeof window === 'undefined'\n                ? { textContent: '' }\n                : document.createElement('style');\n            if (typeof document !== 'undefined') {\n                document.head.appendChild(tag);\n            }\n            this._tag = tag;\n            return tag;\n        }\n        return undefined;\n    };\n    /** Checks if the style tag needs updating and if so queues up the change */\n    TypeStyle.prototype._styleUpdated = function () {\n        var _this = this;\n        var changeId = this._freeStyle.changeId;\n        var lastChangeId = this._lastFreeStyleChangeId;\n        if (!this._pendingRawChange && changeId === lastChangeId) {\n            return;\n        }\n        this._lastFreeStyleChangeId = changeId;\n        this._pendingRawChange = false;\n        this._afterAllSync(function () { return _this.forceRenderStyles(); });\n    };\n    TypeStyle.prototype.style = function () {\n        var className = this._freeStyle.registerStyle(convertToStyles(extend.apply(undefined, arguments)));\n        this._styleUpdated();\n        return className;\n    };\n    return TypeStyle;\n}());\nexport { TypeStyle };\n"]},"metadata":{},"sourceType":"module"}