{"ast":null,"code":"import { TypeStyle } from './internal/typestyle';\nexport { TypeStyle };\n/**\n * All the CSS types in the 'types' namespace\n */\n\nimport * as types from './types';\nexport { types };\n/**\n * Export certain utilities\n */\n\nexport { extend, classes, media } from './internal/utilities';\n/** Zero configuration, default instance of TypeStyle */\n\nvar ts = new TypeStyle({\n  autoGenerateTag: true\n});\n/** Sets the target tag where we write the css on style updates */\n\nexport var setStylesTarget = ts.setStylesTarget;\n/**\n * Insert `raw` CSS as a string. This is useful for e.g.\n * - third party CSS that you are customizing with template strings\n * - generating raw CSS in JavaScript\n * - reset libraries like normalize.css that you can use without loaders\n */\n\nexport var cssRaw = ts.cssRaw;\n/**\n * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n */\n\nexport var cssRule = ts.cssRule;\n/**\n * Renders styles to the singleton tag imediately\n * NOTE: You should only call it on initial render to prevent any non CSS flash.\n * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n **/\n\nexport var forceRenderStyles = ts.forceRenderStyles;\n/**\n * Utility function to register an @font-face\n */\n\nexport var fontFace = ts.fontFace;\n/**\n * Allows use to use the stylesheet in a node.js environment\n */\n\nexport var getStyles = ts.getStyles;\n/**\n * Takes keyframes and returns a generated animationName\n */\n\nexport var keyframes = ts.keyframes;\n/**\n * Helps with testing. Reinitializes FreeStyle + raw\n */\n\nexport var reinit = ts.reinit;\n/**\n * Takes CSSProperties and return a generated className you can use on your component\n */\n\nexport var style = ts.style;\n/**\n * Takes an object where property names are ideal class names and property values are CSSProperties, and\n * returns an object where property names are the same ideal class names and the property values are\n * the actual generated class names using the ideal class name as the $debugName\n */\n\nexport var stylesheet = ts.stylesheet;\n/**\n * Creates a new instance of TypeStyle separate from the default instance.\n *\n * - Use this for creating a different typestyle instance for a shadow dom component.\n * - Use this if you don't want an auto tag generated and you just want to collect the CSS.\n *\n * NOTE: styles aren't shared between different instances.\n */\n\nexport function createTypeStyle(target) {\n  var instance = new TypeStyle({\n    autoGenerateTag: false\n  });\n\n  if (target) {\n    instance.setStylesTarget(target);\n  }\n\n  return instance;\n}","map":{"version":3,"sources":["/home/antonio/personal-library/node_modules/typestyle/lib.es2015/index.js"],"names":["TypeStyle","types","extend","classes","media","ts","autoGenerateTag","setStylesTarget","cssRaw","cssRule","forceRenderStyles","fontFace","getStyles","keyframes","reinit","style","stylesheet","createTypeStyle","target","instance"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASA,SAAT;AACA;AACA;AACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAASA,KAAT;AACA;AACA;AACA;;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,KAA1B,QAAuC,sBAAvC;AACA;;AACA,IAAIC,EAAE,GAAG,IAAIL,SAAJ,CAAc;AAAEM,EAAAA,eAAe,EAAE;AAAnB,CAAd,CAAT;AACA;;AACA,OAAO,IAAIC,eAAe,GAAGF,EAAE,CAACE,eAAzB;AACP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,MAAM,GAAGH,EAAE,CAACG,MAAhB;AACP;AACA;AACA;;AACA,OAAO,IAAIC,OAAO,GAAGJ,EAAE,CAACI,OAAjB;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAGL,EAAE,CAACK,iBAA3B;AACP;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAGN,EAAE,CAACM,QAAlB;AACP;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAGP,EAAE,CAACO,SAAnB;AACP;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAGR,EAAE,CAACQ,SAAnB;AACP;AACA;AACA;;AACA,OAAO,IAAIC,MAAM,GAAGT,EAAE,CAACS,MAAhB;AACP;AACA;AACA;;AACA,OAAO,IAAIC,KAAK,GAAGV,EAAE,CAACU,KAAf;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAU,GAAGX,EAAE,CAACW,UAApB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AACpC,MAAIC,QAAQ,GAAG,IAAInB,SAAJ,CAAc;AAAEM,IAAAA,eAAe,EAAE;AAAnB,GAAd,CAAf;;AACA,MAAIY,MAAJ,EAAY;AACRC,IAAAA,QAAQ,CAACZ,eAAT,CAAyBW,MAAzB;AACH;;AACD,SAAOC,QAAP;AACH","sourcesContent":["import { TypeStyle } from './internal/typestyle';\nexport { TypeStyle };\n/**\n * All the CSS types in the 'types' namespace\n */\nimport * as types from './types';\nexport { types };\n/**\n * Export certain utilities\n */\nexport { extend, classes, media } from './internal/utilities';\n/** Zero configuration, default instance of TypeStyle */\nvar ts = new TypeStyle({ autoGenerateTag: true });\n/** Sets the target tag where we write the css on style updates */\nexport var setStylesTarget = ts.setStylesTarget;\n/**\n * Insert `raw` CSS as a string. This is useful for e.g.\n * - third party CSS that you are customizing with template strings\n * - generating raw CSS in JavaScript\n * - reset libraries like normalize.css that you can use without loaders\n */\nexport var cssRaw = ts.cssRaw;\n/**\n * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n */\nexport var cssRule = ts.cssRule;\n/**\n * Renders styles to the singleton tag imediately\n * NOTE: You should only call it on initial render to prevent any non CSS flash.\n * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n **/\nexport var forceRenderStyles = ts.forceRenderStyles;\n/**\n * Utility function to register an @font-face\n */\nexport var fontFace = ts.fontFace;\n/**\n * Allows use to use the stylesheet in a node.js environment\n */\nexport var getStyles = ts.getStyles;\n/**\n * Takes keyframes and returns a generated animationName\n */\nexport var keyframes = ts.keyframes;\n/**\n * Helps with testing. Reinitializes FreeStyle + raw\n */\nexport var reinit = ts.reinit;\n/**\n * Takes CSSProperties and return a generated className you can use on your component\n */\nexport var style = ts.style;\n/**\n * Takes an object where property names are ideal class names and property values are CSSProperties, and\n * returns an object where property names are the same ideal class names and the property values are\n * the actual generated class names using the ideal class name as the $debugName\n */\nexport var stylesheet = ts.stylesheet;\n/**\n * Creates a new instance of TypeStyle separate from the default instance.\n *\n * - Use this for creating a different typestyle instance for a shadow dom component.\n * - Use this if you don't want an auto tag generated and you just want to collect the CSS.\n *\n * NOTE: styles aren't shared between different instances.\n */\nexport function createTypeStyle(target) {\n    var instance = new TypeStyle({ autoGenerateTag: false });\n    if (target) {\n        instance.setStylesTarget(target);\n    }\n    return instance;\n}\n"]},"metadata":{},"sourceType":"module"}